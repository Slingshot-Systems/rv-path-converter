# Copyright (C) 2024 Slingshot Systems Inc.
# SPDX-License-Identifier: Apache-2.0

from rv import commands, extra_commands, rvtypes

# rv.commands reference
# https://github.com/AcademySoftwareFoundation/OpenRV/blob/ad0e4d25cbdbc3e9fec98ac46d30d7a3daadd496/src/lib/app/mu_rvui/commands.mud

SETTINGS_NAME = "PATH_CONVERTER"


class PathConverterMode(rvtypes.MinorMode):
    _enabled = False
    _from_prefix = ""
    _to_prefix = ""

    def __init__(self):
        super().__init__()

        self._enabled: bool = commands.readSettings(
            SETTINGS_NAME, "enabled", self._enabled
        )
        self._from_prefix: str = commands.readSettings(
            SETTINGS_NAME, "fromPrefix", self._from_prefix
        )
        self._to_prefix: str = commands.readSettings(
            SETTINGS_NAME, "toPrefix", self._to_prefix
        )

        init_bindings = [
            (
                "incoming-source-path",
                self.swap_path,
                "Swap prefix in incoming source path",
            )
        ]

        self.init("rv-path-converter", init_bindings, None, menu=self.give_menu())

    def give_menu(self):
        return [
            (
                "Path Conversion",
                [
                    (
                        f"From: {self._from_prefix or 'Not Set'}",
                        None,
                        None,
                        lambda: commands.DisabledMenuState,
                    ),
                    (
                        f"To: {self._to_prefix or 'Not Set'}",
                        None,
                        None,
                        lambda: commands.DisabledMenuState,
                    ),
                    ("_", None),
                    ("Change From Path...", self.set_prefix_path("from"), "", None),
                    ("Change To Path...", self.set_prefix_path("to"), "", None),
                    ("Enable", self.toggle_enabled, "", self.is_enabled),
                ],
            )
        ]

    def is_enabled(self):
        if self._enabled:
            return commands.CheckedMenuState
        else:
            return commands.UncheckedMenuState

    def toggle_enabled(self, event):
        if not self._enabled and (self._from_prefix == "" or self._to_prefix == ""):
            extra_commands.displayFeedback("'From' and 'To' paths must be set.", 5.0)
            return

        self._enabled = not self._enabled
        commands.writeSettings(SETTINGS_NAME, "enabled", self._enabled)

    def set_prefix_path(self, type: str):
        def _set_prefix_path(event):
            try:
                _path = commands.openFileDialog(
                    False,  # display as 'sheet' on mac
                    False,  # multiple selections allowed
                    True,  # only directories allowed
                    None,  # filters "ext1|desc1|ext2|desc2|ext3|desc3|..."
                    None,  # default path
                )[0]
            except Exception:
                return

            commands.writeSettings(SETTINGS_NAME, f"{type}Prefix", _path.rstrip("/\\"))

            if type == "from":
                self._from_prefix = _path
            elif type == "to":
                self._to_prefix = _path

            if self._from_prefix and self._to_prefix and not self._enabled:
                self.toggle_enabled(None)

            # update paths in menu
            commands.defineModeMenu("rv-path-converter", self.give_menu(), True)

        return _set_prefix_path

    def swap_path(self, event):
        #  The contents of the "incoming-source-path" looks like "filename;;tag".
        path, tag = event.contents().split(";;")

        event.reject()

        if not self._enabled or tag != "session":
            #  Restrict this conversion to paths contained in .rv session files only.
            #  a tag of "explicit" is generated by the code that shows the file browser.

            event.setReturnContent(path)
            return

        if path.startswith(self._from_prefix):
            path = self._to_prefix + path[len(self._from_prefix) :]
            print(f"INFO: path swapped to {path}")

        event.setReturnContent(path)


def createMode():
    return PathConverterMode()
